// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btclightclient/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Only accept blocks sending from these addresses
	Senders []string `protobuf:"bytes,1,rep,name=senders,proto3" json:"senders,omitempty"`
	// The minimum number of confirmations required for a block to be accepted
	Confirmations int32 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
	MaxAcceptableBlockDepth uint64 `protobuf:"varint,3,opt,name=max_acceptable_block_depth,json=maxAcceptableBlockDepth,proto3" json:"max_acceptable_block_depth,omitempty"`
	// the denomanation of the voucher
	BtcVoucherDenom string `protobuf:"bytes,4,opt,name=btc_voucher_denom,json=btcVoucherDenom,proto3" json:"btc_voucher_denom,omitempty"`
	// the address to which the voucher is sent
	BtcVoucherAddress []string `protobuf:"bytes,5,rep,name=btc_voucher_address,json=btcVoucherAddress,proto3" json:"btc_voucher_address,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b47f8b78acf6f6e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSenders() []string {
	if m != nil {
		return m.Senders
	}
	return nil
}

func (m *Params) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *Params) GetMaxAcceptableBlockDepth() uint64 {
	if m != nil {
		return m.MaxAcceptableBlockDepth
	}
	return 0
}

func (m *Params) GetBtcVoucherDenom() string {
	if m != nil {
		return m.BtcVoucherDenom
	}
	return ""
}

func (m *Params) GetBtcVoucherAddress() []string {
	if m != nil {
		return m.BtcVoucherAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "side.btclightclient.Params")
}

func init() { proto.RegisterFile("side/btclightclient/params.proto", fileDescriptor_3b47f8b78acf6f6e) }

var fileDescriptor_3b47f8b78acf6f6e = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbb, 0x6a, 0xf3, 0x30,
	0x00, 0x85, 0xa3, 0x3f, 0x97, 0x9f, 0x08, 0x4a, 0x89, 0x52, 0xa8, 0xc8, 0x20, 0x4c, 0xe9, 0x60,
	0x3a, 0xd8, 0x43, 0xc6, 0x4e, 0x09, 0x59, 0x0b, 0xc5, 0x43, 0x87, 0x2e, 0x46, 0xb7, 0xda, 0xa6,
	0x96, 0x65, 0x24, 0xa5, 0xa4, 0x6f, 0xd1, 0xc7, 0xea, 0x98, 0xb1, 0x63, 0x1b, 0xbf, 0x48, 0x91,
	0x4c, 0x2f, 0xe9, 0x22, 0x74, 0xce, 0xf7, 0x09, 0xc4, 0x81, 0x91, 0xad, 0x84, 0x4c, 0x99, 0xe3,
	0x75, 0x55, 0x94, 0xfe, 0x94, 0x8d, 0x4b, 0x5b, 0x6a, 0xa8, 0xb2, 0x49, 0x6b, 0xb4, 0xd3, 0x68,
	0xee, 0x8d, 0xe4, 0xd8, 0x58, 0x9c, 0x15, 0xba, 0xd0, 0x81, 0xa7, 0xfe, 0xd6, 0xab, 0x17, 0x1f,
	0x00, 0x4e, 0x6e, 0xc3, 0x5b, 0x84, 0xe1, 0x7f, 0x2b, 0x1b, 0x21, 0x8d, 0xc5, 0x20, 0x1a, 0xc6,
	0xd3, 0xec, 0x2b, 0xa2, 0x4b, 0x78, 0xc2, 0x75, 0xf3, 0x50, 0x19, 0x45, 0x5d, 0xa5, 0x1b, 0x8b,
	0xff, 0x45, 0x20, 0x1e, 0x67, 0xc7, 0x25, 0xba, 0x86, 0x0b, 0x45, 0x77, 0x39, 0xe5, 0x5c, 0xb6,
	0x8e, 0xb2, 0x5a, 0xe6, 0xac, 0xd6, 0xfc, 0x31, 0x17, 0xb2, 0x75, 0x25, 0x1e, 0x46, 0x20, 0x1e,
	0x65, 0xe7, 0x8a, 0xee, 0x56, 0xdf, 0xc2, 0xda, 0xf3, 0x8d, 0xc7, 0xe8, 0x0a, 0xce, 0x98, 0xe3,
	0xf9, 0x93, 0xde, 0xf2, 0x52, 0x9a, 0x5c, 0xc8, 0x46, 0x2b, 0x3c, 0x8a, 0x40, 0x3c, 0xcd, 0x4e,
	0x99, 0xe3, 0x77, 0x7d, 0xbf, 0xf1, 0x35, 0x4a, 0xe0, 0xfc, 0xb7, 0x4b, 0x85, 0x30, 0xd2, 0x5a,
	0x3c, 0x0e, 0x9f, 0x9e, 0xfd, 0xd8, 0xab, 0x1e, 0xac, 0x6f, 0x5e, 0x0f, 0x04, 0xec, 0x0f, 0x04,
	0xbc, 0x1f, 0x08, 0x78, 0xe9, 0xc8, 0x60, 0xdf, 0x91, 0xc1, 0x5b, 0x47, 0x06, 0xf7, 0xcb, 0xa2,
	0x72, 0xe5, 0x96, 0x25, 0x5c, 0xab, 0xd4, 0x6f, 0x16, 0x36, 0xe1, 0xba, 0x0e, 0x21, 0xdd, 0xfd,
	0x1d, 0xd9, 0x3d, 0xb7, 0xd2, 0xb2, 0x49, 0xb0, 0x96, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xce,
	0x86, 0x0b, 0x4d, 0x88, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcVoucherAddress) > 0 {
		for iNdEx := len(m.BtcVoucherAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BtcVoucherAddress[iNdEx])
			copy(dAtA[i:], m.BtcVoucherAddress[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.BtcVoucherAddress[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BtcVoucherDenom) > 0 {
		i -= len(m.BtcVoucherDenom)
		copy(dAtA[i:], m.BtcVoucherDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BtcVoucherDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxAcceptableBlockDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxAcceptableBlockDepth))
		i--
		dAtA[i] = 0x18
	}
	if m.Confirmations != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Confirmations))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Senders) > 0 {
		for iNdEx := len(m.Senders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Senders[iNdEx])
			copy(dAtA[i:], m.Senders[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Senders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Senders) > 0 {
		for _, s := range m.Senders {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.Confirmations != 0 {
		n += 1 + sovParams(uint64(m.Confirmations))
	}
	if m.MaxAcceptableBlockDepth != 0 {
		n += 1 + sovParams(uint64(m.MaxAcceptableBlockDepth))
	}
	l = len(m.BtcVoucherDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.BtcVoucherAddress) > 0 {
		for _, s := range m.BtcVoucherAddress {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Senders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Senders = append(m.Senders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
			}
			m.Confirmations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confirmations |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAcceptableBlockDepth", wireType)
			}
			m.MaxAcceptableBlockDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAcceptableBlockDepth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcVoucherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcVoucherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcVoucherAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcVoucherAddress = append(m.BtcVoucherAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
