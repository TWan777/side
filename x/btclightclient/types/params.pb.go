// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btclightclient/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Only accept blocks sending from these addresses
	Senders []string `protobuf:"bytes,1,rep,name=senders,proto3" json:"senders,omitempty"`
	// The minimum number of confirmations required for a block to be accepted
	Confirmations int32 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
	MaxAcceptableBlockDepth uint64 `protobuf:"varint,3,opt,name=max_acceptable_block_depth,json=maxAcceptableBlockDepth,proto3" json:"max_acceptable_block_depth,omitempty"`
	// the denomanation of the voucher
	BtcVoucherDenom string `protobuf:"bytes,4,opt,name=btc_voucher_denom,json=btcVoucherDenom,proto3" json:"btc_voucher_denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b47f8b78acf6f6e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSenders() []string {
	if m != nil {
		return m.Senders
	}
	return nil
}

func (m *Params) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *Params) GetMaxAcceptableBlockDepth() uint64 {
	if m != nil {
		return m.MaxAcceptableBlockDepth
	}
	return 0
}

func (m *Params) GetBtcVoucherDenom() string {
	if m != nil {
		return m.BtcVoucherDenom
	}
	return ""
}

// Bitcoin Block Header
type BlockHeader struct {
	Version           uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Hash              string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height            uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,4,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleRoot        string `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Nonce             uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits              string `protobuf:"bytes,7,opt,name=bits,proto3" json:"bits,omitempty"`
	Time              uint64 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	Ntx               uint64 `protobuf:"varint,9,opt,name=ntx,proto3" json:"ntx,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b47f8b78acf6f6e, []int{1}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *BlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *BlockHeader) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockHeader) GetNtx() uint64 {
	if m != nil {
		return m.Ntx
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "side.btclightclient.Params")
	proto.RegisterType((*BlockHeader)(nil), "side.btclightclient.BlockHeader")
}

func init() { proto.RegisterFile("side/btclightclient/params.proto", fileDescriptor_3b47f8b78acf6f6e) }

var fileDescriptor_3b47f8b78acf6f6e = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x3d, 0x8e, 0xd4, 0x30,
	0x14, 0x1e, 0x33, 0x3f, 0xcb, 0x78, 0x85, 0x60, 0xbd, 0x2b, 0xb0, 0xb6, 0x08, 0xd1, 0x8a, 0x62,
	0x44, 0x31, 0x29, 0xb6, 0xa4, 0x62, 0xb5, 0x05, 0x0d, 0x12, 0x4a, 0x41, 0x41, 0x13, 0xd9, 0xce,
	0x23, 0xb1, 0x36, 0xf6, 0x8b, 0x6c, 0xcf, 0x28, 0xdc, 0x82, 0xab, 0x70, 0x0b, 0xca, 0x2d, 0x29,
	0xd1, 0xcc, 0x15, 0x38, 0x00, 0xb2, 0x33, 0x83, 0x34, 0x34, 0xd1, 0xf7, 0xf7, 0xf2, 0x3e, 0xe5,
	0x85, 0xe6, 0x5e, 0xd7, 0x50, 0xc8, 0xa0, 0x3a, 0xdd, 0xb4, 0xf1, 0x09, 0x36, 0x14, 0xbd, 0x70,
	0xc2, 0xf8, 0x75, 0xef, 0x30, 0x20, 0xbb, 0x8c, 0x89, 0xf5, 0x69, 0xe2, 0xfa, 0xaa, 0xc1, 0x06,
	0x93, 0x5f, 0x44, 0x34, 0x46, 0x6f, 0x7e, 0x10, 0xba, 0xf8, 0x94, 0x66, 0x19, 0xa7, 0x67, 0x1e,
	0x6c, 0x0d, 0xce, 0x73, 0x92, 0x4f, 0x57, 0xcb, 0xf2, 0x48, 0xd9, 0x1b, 0xfa, 0x4c, 0xa1, 0xfd,
	0xaa, 0x9d, 0x11, 0x41, 0xa3, 0xf5, 0xfc, 0x49, 0x4e, 0x56, 0xf3, 0xf2, 0x54, 0x64, 0xef, 0xe8,
	0xb5, 0x11, 0x43, 0x25, 0x94, 0x82, 0x3e, 0x08, 0xd9, 0x41, 0x25, 0x3b, 0x54, 0x0f, 0x55, 0x0d,
	0x7d, 0x68, 0xf9, 0x34, 0x27, 0xab, 0x59, 0xf9, 0xca, 0x88, 0xe1, 0xfd, 0xbf, 0xc0, 0x5d, 0xf4,
	0xef, 0xa3, 0xcd, 0xde, 0xd2, 0x0b, 0x19, 0x54, 0xb5, 0xc5, 0x8d, 0x6a, 0xc1, 0x55, 0x35, 0x58,
	0x34, 0x7c, 0x96, 0x93, 0xd5, 0xb2, 0x7c, 0x2e, 0x83, 0xfa, 0x3c, 0xea, 0xf7, 0x51, 0xbe, 0xf9,
	0x43, 0xe8, 0x79, 0x1a, 0xfd, 0x00, 0xa2, 0x06, 0x17, 0x8b, 0x6f, 0xc1, 0x79, 0x8d, 0x96, 0x93,
	0xb4, 0xe5, 0x48, 0x19, 0xa3, 0xb3, 0x56, 0xf8, 0x36, 0xf5, 0x5d, 0x96, 0x09, 0xb3, 0x97, 0x74,
	0xd1, 0x42, 0xfc, 0x2e, 0x87, 0x4a, 0x07, 0xc6, 0xd6, 0xf4, 0xb2, 0x77, 0xb0, 0xd5, 0xb8, 0xf1,
	0x87, 0xe2, 0x69, 0x74, 0xec, 0x70, 0x71, 0xb4, 0xc6, 0xbd, 0xf1, 0x3d, 0xaf, 0xe9, 0xb9, 0x01,
	0xf7, 0xd0, 0x41, 0xe5, 0x10, 0x03, 0x9f, 0xa7, 0x1c, 0x1d, 0xa5, 0x12, 0x31, 0xb0, 0x2b, 0x3a,
	0xb7, 0x68, 0x15, 0xf0, 0x45, 0xda, 0x33, 0x92, 0x58, 0x49, 0xea, 0xe0, 0xf9, 0xd9, 0x58, 0x29,
	0xe2, 0xa8, 0x05, 0x6d, 0x80, 0x3f, 0x4d, 0xc1, 0x84, 0xd9, 0x0b, 0x3a, 0xb5, 0x61, 0xe0, 0xcb,
	0x24, 0x45, 0x78, 0xf7, 0xf1, 0xe7, 0x2e, 0x23, 0x8f, 0xbb, 0x8c, 0xfc, 0xde, 0x65, 0xe4, 0xfb,
	0x3e, 0x9b, 0x3c, 0xee, 0xb3, 0xc9, 0xaf, 0x7d, 0x36, 0xf9, 0x72, 0xdb, 0xe8, 0xd0, 0x6e, 0xe4,
	0x5a, 0xa1, 0x29, 0xe2, 0xe9, 0xd3, 0x69, 0x15, 0x76, 0x89, 0x14, 0xc3, 0xff, 0xff, 0x4a, 0xf8,
	0xd6, 0x83, 0x97, 0x8b, 0x94, 0xba, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x08, 0x42, 0x8d, 0x83,
	0x4f, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcVoucherDenom) > 0 {
		i -= len(m.BtcVoucherDenom)
		copy(dAtA[i:], m.BtcVoucherDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BtcVoucherDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxAcceptableBlockDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxAcceptableBlockDepth))
		i--
		dAtA[i] = 0x18
	}
	if m.Confirmations != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Confirmations))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Senders) > 0 {
		for iNdEx := len(m.Senders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Senders[iNdEx])
			copy(dAtA[i:], m.Senders[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Senders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ntx != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Ntx))
		i--
		dAtA[i] = 0x48
	}
	if m.Time != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Bits) > 0 {
		i -= len(m.Bits)
		copy(dAtA[i:], m.Bits)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Bits)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreviousBlockHash) > 0 {
		i -= len(m.PreviousBlockHash)
		copy(dAtA[i:], m.PreviousBlockHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PreviousBlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Senders) > 0 {
		for _, s := range m.Senders {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.Confirmations != 0 {
		n += 1 + sovParams(uint64(m.Confirmations))
	}
	if m.MaxAcceptableBlockDepth != 0 {
		n += 1 + sovParams(uint64(m.MaxAcceptableBlockDepth))
	}
	l = len(m.BtcVoucherDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovParams(uint64(m.Version))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovParams(uint64(m.Height))
	}
	l = len(m.PreviousBlockHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovParams(uint64(m.Nonce))
	}
	l = len(m.Bits)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovParams(uint64(m.Time))
	}
	if m.Ntx != 0 {
		n += 1 + sovParams(uint64(m.Ntx))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Senders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Senders = append(m.Senders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
			}
			m.Confirmations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confirmations |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAcceptableBlockDepth", wireType)
			}
			m.MaxAcceptableBlockDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAcceptableBlockDepth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcVoucherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcVoucherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntx", wireType)
			}
			m.Ntx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ntx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
