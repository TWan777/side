// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btclightclient/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgBlockHeaderRequest defines the Msg/SubmitBlockHeaders request type.
type MsgSubmitBlockHeaderRequest struct {
	Sender       string         `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	BlockHeaders []*BlockHeader `protobuf:"bytes,2,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
}

func (m *MsgSubmitBlockHeaderRequest) Reset()         { *m = MsgSubmitBlockHeaderRequest{} }
func (m *MsgSubmitBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBlockHeaderRequest) ProtoMessage()    {}
func (*MsgSubmitBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{0}
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBlockHeaderRequest.Merge(m, src)
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBlockHeaderRequest proto.InternalMessageInfo

func (m *MsgSubmitBlockHeaderRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitBlockHeaderRequest) GetBlockHeaders() []*BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

// MsgSubmitBlockHeadersResponse defines the Msg/SubmitBlockHeaders response type.
type MsgSubmitBlockHeadersResponse struct {
}

func (m *MsgSubmitBlockHeadersResponse) Reset()         { *m = MsgSubmitBlockHeadersResponse{} }
func (m *MsgSubmitBlockHeadersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBlockHeadersResponse) ProtoMessage()    {}
func (*MsgSubmitBlockHeadersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{1}
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBlockHeadersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBlockHeadersResponse.Merge(m, src)
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBlockHeadersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBlockHeadersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBlockHeadersResponse proto.InternalMessageInfo

// MsgSubmitTransactionRequest defines the Msg/SubmitTransaction request type.
type MsgSubmitTransactionRequest struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// the tx bytes in base64 format
	// used for parsing the sender of the transaction
	PrevTxBytes string `protobuf:"bytes,3,opt,name=prev_tx_bytes,json=prevTxBytes,proto3" json:"prev_tx_bytes,omitempty"`
	// the tx bytes in base64 format
	TxBytes string   `protobuf:"bytes,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Proof   []string `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgSubmitTransactionRequest) Reset()         { *m = MsgSubmitTransactionRequest{} }
func (m *MsgSubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTransactionRequest) ProtoMessage()    {}
func (*MsgSubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{2}
}
func (m *MsgSubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTransactionRequest.Merge(m, src)
}
func (m *MsgSubmitTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTransactionRequest proto.InternalMessageInfo

func (m *MsgSubmitTransactionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitTransactionRequest) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *MsgSubmitTransactionRequest) GetPrevTxBytes() string {
	if m != nil {
		return m.PrevTxBytes
	}
	return ""
}

func (m *MsgSubmitTransactionRequest) GetTxBytes() string {
	if m != nil {
		return m.TxBytes
	}
	return ""
}

func (m *MsgSubmitTransactionRequest) GetProof() []string {
	if m != nil {
		return m.Proof
	}
	return nil
}

// MsgSubmitTransactionResponse defines the Msg/SubmitTransaction response type.
type MsgSubmitTransactionResponse struct {
}

func (m *MsgSubmitTransactionResponse) Reset()         { *m = MsgSubmitTransactionResponse{} }
func (m *MsgSubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTransactionResponse) ProtoMessage()    {}
func (*MsgSubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{3}
}
func (m *MsgSubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTransactionResponse.Merge(m, src)
}
func (m *MsgSubmitTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTransactionResponse proto.InternalMessageInfo

// Msg defines the MsgUpdateSender service.
type MsgUpdateSendersRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// update senders who can send block headers to the side chain
	Senders []string `protobuf:"bytes,2,rep,name=senders,proto3" json:"senders,omitempty"`
}

func (m *MsgUpdateSendersRequest) Reset()         { *m = MsgUpdateSendersRequest{} }
func (m *MsgUpdateSendersRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSendersRequest) ProtoMessage()    {}
func (*MsgUpdateSendersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{4}
}
func (m *MsgUpdateSendersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSendersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSendersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSendersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSendersRequest.Merge(m, src)
}
func (m *MsgUpdateSendersRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSendersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSendersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSendersRequest proto.InternalMessageInfo

func (m *MsgUpdateSendersRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateSendersRequest) GetSenders() []string {
	if m != nil {
		return m.Senders
	}
	return nil
}

// MsgUpdateSenderResponse defines the Msg/UpdateSender response type.
type MsgUpdateSendersResponse struct {
}

func (m *MsgUpdateSendersResponse) Reset()         { *m = MsgUpdateSendersResponse{} }
func (m *MsgUpdateSendersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSendersResponse) ProtoMessage()    {}
func (*MsgUpdateSendersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df07798138ba91c, []int{5}
}
func (m *MsgUpdateSendersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSendersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSendersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSendersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSendersResponse.Merge(m, src)
}
func (m *MsgUpdateSendersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSendersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSendersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSendersResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitBlockHeaderRequest)(nil), "side.btclightclient.MsgSubmitBlockHeaderRequest")
	proto.RegisterType((*MsgSubmitBlockHeadersResponse)(nil), "side.btclightclient.MsgSubmitBlockHeadersResponse")
	proto.RegisterType((*MsgSubmitTransactionRequest)(nil), "side.btclightclient.MsgSubmitTransactionRequest")
	proto.RegisterType((*MsgSubmitTransactionResponse)(nil), "side.btclightclient.MsgSubmitTransactionResponse")
	proto.RegisterType((*MsgUpdateSendersRequest)(nil), "side.btclightclient.MsgUpdateSendersRequest")
	proto.RegisterType((*MsgUpdateSendersResponse)(nil), "side.btclightclient.MsgUpdateSendersResponse")
}

func init() { proto.RegisterFile("side/btclightclient/tx.proto", fileDescriptor_4df07798138ba91c) }

var fileDescriptor_4df07798138ba91c = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0xae, 0x93, 0x40,
	0x14, 0x2e, 0xc5, 0x7b, 0xaf, 0x9c, 0x6b, 0x17, 0x8e, 0x37, 0x8a, 0x58, 0x91, 0xb0, 0xea, 0x42,
	0x41, 0x7b, 0xdf, 0xa0, 0x89, 0x89, 0x89, 0x61, 0xc3, 0xad, 0x1b, 0x37, 0x0d, 0x3f, 0x23, 0x10,
	0x29, 0x83, 0x9c, 0xa9, 0xa1, 0xc6, 0x87, 0xf0, 0x31, 0x7c, 0x14, 0x97, 0x5d, 0xba, 0x34, 0xed,
	0xca, 0xb7, 0x30, 0x0c, 0xd8, 0x9f, 0x80, 0xb6, 0x77, 0x43, 0xe6, 0xcc, 0xf7, 0xcd, 0xf7, 0x7d,
	0x73, 0x0e, 0x03, 0x43, 0x4c, 0x42, 0x6a, 0xfb, 0x3c, 0x48, 0x93, 0x28, 0xae, 0xbe, 0x34, 0xe3,
	0x36, 0x2f, 0xad, 0xbc, 0x60, 0x9c, 0x91, 0x07, 0x15, 0x6a, 0x1d, 0xa2, 0xda, 0x55, 0xc4, 0x22,
	0x26, 0x70, 0xbb, 0x5a, 0xd5, 0x54, 0xcd, 0xe8, 0x12, 0xca, 0xbd, 0xc2, 0x9b, 0x63, 0xcd, 0x30,
	0xbf, 0xc2, 0x13, 0x07, 0xa3, 0x9b, 0x85, 0x3f, 0x4f, 0xf8, 0x24, 0x65, 0xc1, 0xc7, 0x37, 0xd4,
	0x0b, 0x69, 0xe1, 0xd2, 0x4f, 0x0b, 0x8a, 0x9c, 0x3c, 0x84, 0x73, 0xa4, 0x59, 0x48, 0x0b, 0x55,
	0x32, 0xa4, 0x91, 0xe2, 0x36, 0x15, 0x79, 0x0d, 0x03, 0xbf, 0x62, 0xcf, 0x62, 0x41, 0x47, 0xb5,
	0x6f, 0xc8, 0xa3, 0xcb, 0xb1, 0x61, 0x75, 0x64, 0xb3, 0xf6, 0x75, 0xef, 0xf9, 0xbb, 0x02, 0xcd,
	0x67, 0xf0, 0xb4, 0xcb, 0x1d, 0x5d, 0x8a, 0x39, 0xcb, 0x90, 0x9a, 0xdf, 0xa5, 0xbd, 0x7c, 0xd3,
	0xc2, 0xcb, 0xd0, 0x0b, 0x78, 0xc2, 0xb2, 0x63, 0xf9, 0x86, 0xa0, 0x08, 0xa3, 0xd8, 0xc3, 0x58,
	0xed, 0x0b, 0x68, 0xb7, 0x41, 0x4c, 0x18, 0xe4, 0x05, 0xfd, 0x3c, 0xe3, 0xe5, 0xcc, 0x5f, 0x72,
	0x8a, 0xaa, 0x2c, 0x18, 0x97, 0xd5, 0xe6, 0xb4, 0x9c, 0x54, 0x5b, 0xe4, 0x31, 0xdc, 0xdd, 0xc2,
	0x77, 0x04, 0x7c, 0xc1, 0x1b, 0xe8, 0x0a, 0xce, 0xf2, 0x82, 0xb1, 0x0f, 0xea, 0x99, 0x21, 0x8f,
	0x14, 0xb7, 0x2e, 0x4c, 0x1d, 0x86, 0xdd, 0x49, 0x9b, 0xab, 0xbc, 0x85, 0x47, 0x0e, 0x46, 0xef,
	0xf2, 0xd0, 0xe3, 0xf4, 0x46, 0xa4, 0xc4, 0x63, 0xb7, 0x50, 0xe1, 0xa2, 0x5e, 0xd5, 0xfd, 0x55,
	0xdc, 0xbf, 0xa5, 0xa9, 0x81, 0xda, 0x16, 0xab, 0x8d, 0xc6, 0xbf, 0xfb, 0x20, 0x3b, 0x18, 0x91,
	0x2f, 0x40, 0xda, 0x9d, 0x25, 0x2f, 0x3b, 0x47, 0xf4, 0x9f, 0x7f, 0x40, 0x1b, 0x9f, 0x7c, 0x62,
	0x9b, 0x81, 0x94, 0x70, 0xbf, 0xd5, 0x89, 0x63, 0xd6, 0xed, 0xf1, 0x6a, 0xaf, 0x6e, 0x71, 0xa2,
	0x71, 0x4e, 0x61, 0x70, 0xd0, 0x16, 0xf2, 0xfc, 0x5f, 0x1a, 0x5d, 0xa3, 0xd0, 0x5e, 0x9c, 0xc8,
	0xae, 0xdd, 0x26, 0xce, 0x8f, 0xb5, 0x2e, 0xad, 0xd6, 0xba, 0xf4, 0x6b, 0xad, 0x4b, 0xdf, 0x36,
	0x7a, 0x6f, 0xb5, 0xd1, 0x7b, 0x3f, 0x37, 0x7a, 0xef, 0xfd, 0x75, 0x94, 0xf0, 0x78, 0xe1, 0x5b,
	0x01, 0x9b, 0xdb, 0x95, 0xa4, 0x78, 0x6e, 0x01, 0x4b, 0x45, 0x61, 0x97, 0xad, 0xd7, 0xbd, 0xcc,
	0x29, 0xfa, 0xe7, 0x82, 0x75, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xe7, 0x80, 0xd3, 0x01,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitBlockHeaders submits bitcoin block headers to the side chain.
	SubmitBlockHeaders(ctx context.Context, in *MsgSubmitBlockHeaderRequest, opts ...grpc.CallOption) (*MsgSubmitBlockHeadersResponse, error)
	// SubmitTransaction submits bitcoin transaction to the side chain.
	SubmitTransaction(ctx context.Context, in *MsgSubmitTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitTransactionResponse, error)
	// UpdateSenders updates the senders of the side chain.
	UpdateSenders(ctx context.Context, in *MsgUpdateSendersRequest, opts ...grpc.CallOption) (*MsgUpdateSendersResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitBlockHeaders(ctx context.Context, in *MsgSubmitBlockHeaderRequest, opts ...grpc.CallOption) (*MsgSubmitBlockHeadersResponse, error) {
	out := new(MsgSubmitBlockHeadersResponse)
	err := c.cc.Invoke(ctx, "/side.btclightclient.Msg/SubmitBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitTransaction(ctx context.Context, in *MsgSubmitTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitTransactionResponse, error) {
	out := new(MsgSubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/side.btclightclient.Msg/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSenders(ctx context.Context, in *MsgUpdateSendersRequest, opts ...grpc.CallOption) (*MsgUpdateSendersResponse, error) {
	out := new(MsgUpdateSendersResponse)
	err := c.cc.Invoke(ctx, "/side.btclightclient.Msg/UpdateSenders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitBlockHeaders submits bitcoin block headers to the side chain.
	SubmitBlockHeaders(context.Context, *MsgSubmitBlockHeaderRequest) (*MsgSubmitBlockHeadersResponse, error)
	// SubmitTransaction submits bitcoin transaction to the side chain.
	SubmitTransaction(context.Context, *MsgSubmitTransactionRequest) (*MsgSubmitTransactionResponse, error)
	// UpdateSenders updates the senders of the side chain.
	UpdateSenders(context.Context, *MsgUpdateSendersRequest) (*MsgUpdateSendersResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitBlockHeaders(ctx context.Context, req *MsgSubmitBlockHeaderRequest) (*MsgSubmitBlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlockHeaders not implemented")
}
func (*UnimplementedMsgServer) SubmitTransaction(ctx context.Context, req *MsgSubmitTransactionRequest) (*MsgSubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedMsgServer) UpdateSenders(ctx context.Context, req *MsgUpdateSendersRequest) (*MsgUpdateSendersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSenders not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btclightclient.Msg/SubmitBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBlockHeaders(ctx, req.(*MsgSubmitBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btclightclient.Msg/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitTransaction(ctx, req.(*MsgSubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSenders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSendersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSenders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btclightclient.Msg/UpdateSenders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSenders(ctx, req.(*MsgUpdateSendersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "side.btclightclient.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlockHeaders",
			Handler:    _Msg_SubmitBlockHeaders_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _Msg_SubmitTransaction_Handler,
		},
		{
			MethodName: "UpdateSenders",
			Handler:    _Msg_UpdateSenders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "side/btclightclient/tx.proto",
}

func (m *MsgSubmitBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for iNdEx := len(m.BlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBlockHeadersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBlockHeadersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBlockHeadersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevTxBytes) > 0 {
		i -= len(m.PrevTxBytes)
		copy(dAtA[i:], m.PrevTxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrevTxBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSendersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSendersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSendersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Senders) > 0 {
		for iNdEx := len(m.Senders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Senders[iNdEx])
			copy(dAtA[i:], m.Senders[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Senders[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSendersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSendersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSendersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BlockHeaders) > 0 {
		for _, e := range m.BlockHeaders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitBlockHeadersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrevTxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, s := range m.Proof {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSendersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Senders) > 0 {
		for _, s := range m.Senders {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateSendersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, &BlockHeader{})
			if err := m.BlockHeaders[len(m.BlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBlockHeadersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBlockHeadersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBlockHeadersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevTxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSendersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSendersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSendersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Senders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Senders = append(m.Senders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSendersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSendersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSendersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
