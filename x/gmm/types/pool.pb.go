// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/gmm/pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pool struct {
	//option (cosmos_proto.implements_interface) = "PoolI";
	PoolId     string               `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Sender     string               `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolParams PoolParams           `protobuf:"bytes,3,opt,name=poolParams,proto3" json:"poolParams"`
	Assets     map[string]PoolAsset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// sum of all LP tokens sent out
	TotalShares types.Coin `protobuf:"bytes,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares" yaml:"total_shares"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_539300364e2e3e52, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *Pool) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Pool) GetPoolParams() PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return PoolParams{}
}

func (m *Pool) GetAssets() map[string]PoolAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *Pool) GetTotalShares() types.Coin {
	if m != nil {
		return m.TotalShares
	}
	return types.Coin{}
}

type PoolI struct {
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceCreator string                 `protobuf:"bytes,2,opt,name=source_creator,json=sourceCreator,proto3" json:"source_creator,omitempty"`
	Assets        []*PoolWasmAsset       `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	SwapFee       uint32                 `protobuf:"varint,4,opt,name=swap_fee,json=swapFee,proto3" json:"swap_fee,omitempty"`
	Amp           *cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=amp,proto3,customtype=cosmossdk.io/math.Int" json:"amp,omitempty"`
	Supply        *types.Coin            `protobuf:"bytes,6,opt,name=supply,proto3" json:"supply,omitempty"`
	PoolType      PoolType               `protobuf:"varint,7,opt,name=pool_type,json=poolType,proto3,enum=side.gmm.PoolType" json:"pool_type,omitempty"`
}

func (m *PoolI) Reset()         { *m = PoolI{} }
func (m *PoolI) String() string { return proto.CompactTextString(m) }
func (*PoolI) ProtoMessage()    {}
func (*PoolI) Descriptor() ([]byte, []int) {
	return fileDescriptor_539300364e2e3e52, []int{1}
}
func (m *PoolI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolI.Merge(m, src)
}
func (m *PoolI) XXX_Size() int {
	return m.Size()
}
func (m *PoolI) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolI.DiscardUnknown(m)
}

var xxx_messageInfo_PoolI proto.InternalMessageInfo

func (m *PoolI) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PoolI) GetSourceCreator() string {
	if m != nil {
		return m.SourceCreator
	}
	return ""
}

func (m *PoolI) GetAssets() []*PoolWasmAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *PoolI) GetSwapFee() uint32 {
	if m != nil {
		return m.SwapFee
	}
	return 0
}

func (m *PoolI) GetSupply() *types.Coin {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *PoolI) GetPoolType() PoolType {
	if m != nil {
		return m.PoolType
	}
	return PoolType_WEIGHT
}

type PoolWasmAsset struct {
	Balance *types.Coin `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Weight  uint32      `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Decimal uint32      `protobuf:"varint,3,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (m *PoolWasmAsset) Reset()         { *m = PoolWasmAsset{} }
func (m *PoolWasmAsset) String() string { return proto.CompactTextString(m) }
func (*PoolWasmAsset) ProtoMessage()    {}
func (*PoolWasmAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_539300364e2e3e52, []int{2}
}
func (m *PoolWasmAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolWasmAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolWasmAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolWasmAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolWasmAsset.Merge(m, src)
}
func (m *PoolWasmAsset) XXX_Size() int {
	return m.Size()
}
func (m *PoolWasmAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolWasmAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PoolWasmAsset proto.InternalMessageInfo

func (m *PoolWasmAsset) GetBalance() *types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *PoolWasmAsset) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PoolWasmAsset) GetDecimal() uint32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func init() {
	proto.RegisterType((*Pool)(nil), "side.gmm.Pool")
	proto.RegisterMapType((map[string]PoolAsset)(nil), "side.gmm.Pool.AssetsEntry")
	proto.RegisterType((*PoolI)(nil), "side.gmm.PoolI")
	proto.RegisterType((*PoolWasmAsset)(nil), "side.gmm.PoolWasmAsset")
}

func init() { proto.RegisterFile("side/gmm/pool.proto", fileDescriptor_539300364e2e3e52) }

var fileDescriptor_539300364e2e3e52 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x41, 0x8b, 0xda, 0x4c,
	0x18, 0x36, 0xd1, 0x8d, 0x3a, 0x7e, 0xca, 0xc7, 0xb8, 0xed, 0x46, 0x0b, 0x51, 0x84, 0x42, 0x4a,
	0x61, 0x82, 0xee, 0x65, 0xf1, 0x56, 0x97, 0x16, 0xbc, 0x14, 0x49, 0x0b, 0xa5, 0xbd, 0xc8, 0x98,
	0x4c, 0x63, 0xd8, 0x4c, 0x26, 0x64, 0x46, 0xb7, 0xf9, 0x17, 0xbd, 0xf7, 0x0f, 0xed, 0x71, 0x8f,
	0x4b, 0x0f, 0x52, 0xf4, 0x1f, 0xf4, 0x17, 0x94, 0x99, 0x44, 0x31, 0x97, 0xf6, 0xf6, 0x3e, 0xef,
	0xf3, 0xbc, 0x79, 0xdf, 0xe7, 0x61, 0x02, 0xba, 0x3c, 0xf4, 0x89, 0x13, 0x50, 0xea, 0x24, 0x8c,
	0x45, 0x28, 0x49, 0x99, 0x60, 0xb0, 0x21, 0x9b, 0x28, 0xa0, 0xb4, 0xdf, 0x2f, 0xd1, 0xcb, 0x04,
	0xa7, 0x98, 0xf2, 0x5c, 0xd5, 0xef, 0x95, 0x39, 0xcc, 0x39, 0x11, 0x05, 0x75, 0x19, 0xb0, 0x80,
	0xa9, 0xd2, 0x91, 0x55, 0xd1, 0xb5, 0x3c, 0xc6, 0x29, 0xe3, 0xce, 0x0a, 0x73, 0xe2, 0x6c, 0xc7,
	0x2b, 0x22, 0xf0, 0xd8, 0xf1, 0x58, 0x18, 0xe7, 0xfc, 0xe8, 0x49, 0x07, 0xb5, 0x05, 0x63, 0x11,
	0xbc, 0x02, 0x75, 0xf5, 0xc9, 0xd0, 0x37, 0xb5, 0xa1, 0x66, 0x37, 0x5d, 0x43, 0xc2, 0xb9, 0x0f,
	0x9f, 0x03, 0x83, 0x93, 0xd8, 0x27, 0xa9, 0xa9, 0xe7, 0xfd, 0x1c, 0xc1, 0x29, 0x00, 0x52, 0xb1,
	0x50, 0xe7, 0x99, 0xd5, 0xa1, 0x66, 0xb7, 0x26, 0x97, 0xe8, 0xe8, 0x02, 0x2d, 0x4e, 0xdc, 0xac,
	0xf6, 0xb0, 0x1b, 0x54, 0xdc, 0x33, 0x35, 0xbc, 0x01, 0x86, 0x3a, 0x9d, 0x9b, 0xb5, 0x61, 0xd5,
	0x6e, 0x4d, 0xfa, 0xe5, 0x39, 0xf4, 0x46, 0x91, 0x6f, 0x63, 0x91, 0x66, 0xc5, 0x74, 0xa1, 0x87,
	0x9f, 0xc1, 0x7f, 0x82, 0x09, 0x1c, 0x2d, 0xf9, 0x1a, 0xa7, 0x84, 0x9b, 0x17, 0x6a, 0x6f, 0x0f,
	0xe5, 0x36, 0x91, 0xb4, 0x89, 0x0a, 0x9b, 0xe8, 0x96, 0x85, 0xf1, 0xec, 0x85, 0x1c, 0xff, 0xbd,
	0x1b, 0x74, 0x33, 0x4c, 0xa3, 0xe9, 0xe8, 0x7c, 0x78, 0xe4, 0xb6, 0x14, 0xfc, 0xa0, 0x50, 0xff,
	0x3d, 0x68, 0x9d, 0xed, 0x85, 0xff, 0x83, 0xea, 0x1d, 0xc9, 0x8a, 0x30, 0x64, 0x09, 0x5f, 0x81,
	0x8b, 0x2d, 0x8e, 0x36, 0x44, 0x05, 0xd1, 0x9a, 0x74, 0xcb, 0x47, 0xab, 0x59, 0x37, 0x57, 0x4c,
	0xf5, 0x1b, 0x6d, 0xf4, 0x43, 0x07, 0x17, 0x92, 0x98, 0xc3, 0x0e, 0xd0, 0x4f, 0xb1, 0xea, 0xa1,
	0x0f, 0x5f, 0x82, 0x0e, 0x67, 0x9b, 0xd4, 0x23, 0x4b, 0x2f, 0x25, 0x58, 0xb0, 0x63, 0xb4, 0xed,
	0xbc, 0x7b, 0x9b, 0x37, 0xa1, 0x73, 0x4a, 0xa9, 0xaa, 0x52, 0xba, 0x2a, 0x2f, 0xfc, 0x84, 0x39,
	0xcd, 0x97, 0x1e, 0xc3, 0xe9, 0x81, 0x06, 0xbf, 0xc7, 0xc9, 0xf2, 0x2b, 0x21, 0x66, 0x6d, 0xa8,
	0xd9, 0x6d, 0xb7, 0x2e, 0xf1, 0x3b, 0x42, 0xe0, 0x6b, 0x50, 0xc5, 0x34, 0x51, 0x71, 0x35, 0x67,
	0xbd, 0x9f, 0xbb, 0xc1, 0xb3, 0x3c, 0x31, 0xee, 0xdf, 0xa1, 0x90, 0x39, 0x14, 0x8b, 0x35, 0x9a,
	0xc7, 0xc2, 0x95, 0x2a, 0x38, 0x06, 0x06, 0xdf, 0x24, 0x49, 0x94, 0x99, 0xc6, 0x3f, 0xe2, 0x75,
	0x0b, 0x21, 0x74, 0x40, 0x53, 0x3d, 0x1f, 0x91, 0x25, 0xc4, 0xac, 0x0f, 0x35, 0xbb, 0x33, 0x81,
	0xe5, 0x73, 0x3f, 0x66, 0x09, 0x71, 0x1b, 0x49, 0x51, 0x8d, 0xb6, 0xa0, 0x5d, 0x32, 0x01, 0xaf,
	0x41, 0x7d, 0x85, 0x23, 0x1c, 0x7b, 0x44, 0x25, 0xf5, 0xd7, 0xad, 0x47, 0xa5, 0x7c, 0x9c, 0xf7,
	0x24, 0x0c, 0xd6, 0x42, 0x25, 0xd8, 0x76, 0x0b, 0x04, 0x4d, 0x50, 0xf7, 0x89, 0x17, 0x52, 0x1c,
	0xa9, 0x97, 0xd9, 0x76, 0x8f, 0x70, 0x36, 0x7b, 0xd8, 0x5b, 0xda, 0xe3, 0xde, 0xd2, 0x7e, 0xed,
	0x2d, 0xed, 0xfb, 0xc1, 0xaa, 0x3c, 0x1e, 0xac, 0xca, 0xd3, 0xc1, 0xaa, 0x7c, 0xb1, 0x83, 0x50,
	0xac, 0x37, 0x2b, 0xe4, 0x31, 0xea, 0xc8, 0xcb, 0xd5, 0x0f, 0xe2, 0xb1, 0x48, 0x01, 0xe7, 0x9b,
	0xfa, 0xeb, 0xa4, 0x3d, 0xbe, 0x32, 0x14, 0x75, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x04, 0x62,
	0xfd, 0x55, 0xc9, 0x03, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Assets) > 0 {
		for k := range m.Assets {
			v := m.Assets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPool(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPool(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolType != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolType))
		i--
		dAtA[i] = 0x38
	}
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Amp != nil {
		{
			size := m.Amp.Size()
			i -= size
			if _, err := m.Amp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SwapFee != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.SwapFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SourceCreator) > 0 {
		i -= len(m.SourceCreator)
		copy(dAtA[i:], m.SourceCreator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.SourceCreator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolWasmAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolWasmAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolWasmAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimal != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovPool(uint64(l))
	if len(m.Assets) > 0 {
		for k, v := range m.Assets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovPool(uint64(len(k))) + 1 + l + sovPool(uint64(l))
			n += mapEntrySize + 1 + sovPool(uint64(mapEntrySize))
		}
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *PoolI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.SourceCreator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.SwapFee != 0 {
		n += 1 + sovPool(uint64(m.SwapFee))
	}
	if m.Amp != nil {
		l = m.Amp.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.PoolType != 0 {
		n += 1 + sovPool(uint64(m.PoolType))
	}
	return n
}

func (m *PoolWasmAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovPool(uint64(m.Weight))
	}
	if m.Decimal != 0 {
		n += 1 + sovPool(uint64(m.Decimal))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assets == nil {
				m.Assets = make(map[string]PoolAsset)
			}
			var mapkey string
			mapvalue := &PoolAsset{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPool
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPool
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPool
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPool
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PoolAsset{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPool(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPool
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Assets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &PoolWasmAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			m.SwapFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Amp = &v
			if err := m.Amp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &types.Coin{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolType", wireType)
			}
			m.PoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolType |= PoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolWasmAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolWasmAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolWasmAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
